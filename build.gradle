buildscript {
    ext {
        kotlinVersion = '1.4.31'
        restAssuredVersion = "3.2.0"
    }

    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")

    }

}

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.0'
    id 'org.springframework.boot' version '2.4.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "org.sonarqube" version "3.3"
}

group = "com.sellenium"
version = "0.0.1-SNAPSHOT"
java.sourceCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'org.testng:testng:6.9.10'
    testCompile 'org.seleniumhq.selenium:selenium-chrome-driver:4.8.1'
    testCompile 'org.seleniumhq.selenium:selenium-support:4.8.1'
    testCompile 'io.github.bonigarcia:webdrivermanager:5.3.2'
    testCompile("org.seleniumhq.selenium:selenium-api:4.8.1")
    testCompile ("com.google.code.gson:gson:2.8.5")

    // Selenium Java Client
    testCompile 'org.seleniumhq.selenium:selenium-java:4.8.1'


}

sonarqube {
    properties {
        property "sonar.projectKey", "diegomachadoti_selenium-gradle-exemplo"
        property "sonar.organization", "diegomachadoti"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

test {
    useJUnitPlatform()

    systemProperties System.properties
    maxParallelForks = 5

    // enable TestNG support (default is JUnit)
    useTestNG()

    //Show full exception on failure
    testLogging {
        exceptionFormat = 'full'
    }
    //Show full exception on failure
    testLogging {
        exceptionFormat = 'full'
    }

    //Convenience .. pipe all test results to SDOUT
    afterTest { desc, result ->
        println "${desc.className} ${desc.name} ${result.resultType}"
    }

    //Force tests to always run, even if they haven't been updated
    outputs.upToDateWhen { false }
}

